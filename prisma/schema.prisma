generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id String @id @default(cuid()) @unique

  name                String?
  email               String? @unique
  privyId             String  @unique
  embeddedAddress     String? @unique
  smartAccountAddress String? @unique

  whoopUserId       String?   @unique
  whoopAccessToken  String?
  whoopRefreshToken String?
  whoopTokenExpiry  DateTime?

  whoopCycles           Cycle[]
  whoopSleeps           Sleep[]
  whoopRecoveries       Recovery[]
  whoopWorkouts         Workout[]
  whoopBodyMeasurements BodyMeasurement[]
  whoopProfile          WhoopProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cycle {
  id     String @id @default(cuid())
  userId String

  cycleId String @unique

  createdAtByWhoop DateTime
  updatedAtByWhoop DateTime
  start            DateTime
  end              DateTime?
  timezoneOffset   String
  scoreState       String
  strain           Float
  kilojoule        Float
  averageHeartRate Int
  maxHeartRate     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [whoopUserId], onDelete: Cascade)
}

model Sleep {
  id     String @id @default(cuid())
  userId String

  sleepId String @unique

  createdAtByWhoop            DateTime
  updatedAtByWhoop            DateTime
  start                       DateTime
  end                         DateTime
  timezoneOffset              String
  nap                         Boolean
  scoreState                  String
  totalInBedTimeMilli         Int
  totalAwakeTimeMilli         Int
  totalNoDataTimeMilli        Int
  totalLightSleepTimeMilli    Int
  totalSlowWaveSleepTimeMilli Int
  totalRemSleepTimeMilli      Int
  sleepCycleCount             Int
  disturbanceCount            Int

  baseline_milli_sleep_needed   Int
  need_from_sleep_debt_milli    Int
  need_from_recent_strain_milli Int
  need_from_recent_nap_milli    Int

  respiratoryRate            Float?
  sleepPerformancePercentage Float?
  sleepConsistencyPercentage Float?
  sleepEfficiencyPercentage  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [whoopUserId], onDelete: Cascade)
}

model Recovery {
  id     String @id @default(cuid())
  userId String

  cycleId String @unique
  sleepId String

  createdAtByWhoop DateTime
  updatedAtByWhoop DateTime
  scoreState       String
  userCalibrating  Boolean
  recoveryScore    Float
  restingHeartRate Float
  hrvRmssd         Float
  spo2Percentage   Float?
  skinTempCelsius  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [whoopUserId], onDelete: Cascade)
}

model Workout {
  id     String @id @default(cuid())
  userId String

  workoutId String @unique

  createdAtByWhoop    DateTime
  updatedAtByWhoop    DateTime
  start               DateTime
  end                 DateTime
  timezoneOffset      String
  sportId             Int
  scoreState          String
  strain              Float
  averageHeartRate    Int
  maxHeartRate        Int
  kilojoule           Float
  percentRecorded     Float
  distanceMeter       Float?
  altitudeGainMeter   Float?
  altitudeChangeMeter Float?
  zeroMilli           Int?
  oneMilli            Int?
  twoMilli            Int?
  threeMilli          Int?
  fourMilli           Int?
  fiveMilli           Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [whoopUserId], onDelete: Cascade)
}

model BodyMeasurement {
  id     String @id @default(cuid())
  userId String @unique

  height       Float
  weight       Float
  maxHeartRate Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [whoopUserId], onDelete: Cascade)
}

model WhoopProfile {
  id     String @id @default(cuid())
  userId String @unique

  email     String
  firstName String
  lastName  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [whoopUserId], onDelete: Cascade)
}

model Webhook {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cron {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
